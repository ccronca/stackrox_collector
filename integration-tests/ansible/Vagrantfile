require 'getoptlong'
require 'yaml'

Vagrant.require_version ">= 1.8.0"

config = YAML.load_file(ENV['VM_CONFIG_FILE'] || 'vms.yml')

Vagrant.configure(2) do |vagrant|
  config['vms'].each do |vm_config|
    vagrant.vm.define vm_config['name'] do |machine|
      machine.vm.box = vm_config['box']

      machine.vm.provider "virtualbox" do | vbox, override |
        # nothing to do for virtualbox, but this block prevents
        # google from being the default
      end

      machine.vm.provider :google do |google, override|
        username = config['gcp_username'] || ENV['USER']

        google.google_project_id = config['gcp_project']
        google.image_family = vm_config['image_family']
        google.image_project_id = vm_config['image_project']

        # TODO: add some random for uniqueness
        google.name = "#{username}-#{vm_config['image_family']}-test"
        google.disk_type = "pd-standard"
        google.machine_type = "e2-standard-2"
        google.zone = config['gcp_zone']

        google.google_json_key_location = config['gcp_service_acct_json'] || nil

        override.vm.box = 'google/gce'
        override.ssh.username = username
        override.ssh.private_key_path = config['gcp_ssh_key']
        override.ssh.keys_only = false
      end

      machine.vm.provision "ansible" do |ansible|
        ansible.verbose = "v"
        ansible.playbook = "provision/#{vm_config['name'].split(/-/, 2)[0]}-playbook.yml"
        ansible.host_vars = {
          vm_config['name'] => {
            "vm_config" => "#{vm_config['type']}.#{vm_config['name']}"
          }
        }
      end
    end
  end
end

