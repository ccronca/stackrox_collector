version: 2.1
parameters:
  quay-repo:
    type: string
    default: "quay.io/rhacs-eng"
  dockerized-parallel:
    type: integer
    default: 8
  dockerized-cache-tag:
    type: string
    default: cache-v2
  kernel-bundles-staging:
    type: string
    default: ""
  default-machine-image:
    type: string
    # https://circleci.com/docs/2.0/configuration-reference/#available-machine-images
    default: ubuntu-2004:202111-02

defaultImage: &defaultImage
  docker:
  - image: "<< pipeline.parameters.quay-repo >>/apollo-ci:collector-0.3.39"
    auth:
      username: $QUAY_RHACS_ENG_RO_USERNAME
      password: $QUAY_RHACS_ENG_RO_PASSWORD
  working_directory: ~/workspace
  environment:
    ROX_CI_IMAGE: true

defaultMachine: &defaultMachine
  machine:
    image: << pipeline.parameters.default-machine-image >>

runOnAllTags: &runOnAllTags
  filters:
    branches:
      only:
      - master

runOnAllTagsWithDockerIOPullCtx: &runOnAllTagsWithDockerIOPullCtx
  <<: *runOnAllTags
  context:
    - quay-rhacs-eng-readonly

runOnAllTagsWithDockerIOPushCtx: &runOnAllTagsWithDockerIOPushCtx
  <<: *runOnAllTags
  context:
    - quay-rhacs-eng-readwrite
    - quay-rhacs-eng-readonly
    - quay-stackrox-io-readwrite

orbs:
  slack: circleci/slack@3.4.2
  ci-artifacts: stackrox/ci-artifacts-orb@0.1.1

commands:
  initcommand:
    steps:
    - attach_workspace:
        at: ~/workspace
    - run:
        name: Set up environment
        command: |
          cat >>"$BASH_ENV" \<<-EOF
            export WORKSPACE_ROOT="${HOME}/workspace"
          EOF
          [[ -f ~/workspace/shared-env ]] && cat ~/workspace/shared-env >>"$BASH_ENV"

  read-pr-metadata:
    steps:
    - run:
        name: Read PR metadata
        command: |
          "${SOURCE_ROOT}/.circleci/read-labels.sh" pr-metadata/labels

  gcloud-init:
    parameters:
      service-account-env:
        type: string
        default: GOOGLE_CREDENTIALS_CIRCLECI_COLLECTOR
      bucket-permission-check:
        type: string
        default: gs://collector-build-cache

    steps:
    - run:
        name: Setup GCP env
        command: |
          "${CI_ROOT}/gcloud-init/setup-gcp-env.sh" "${<< parameters.service-account-env >>}" << parameters.bucket-permission-check >>

  quay-login:
    steps:
    - run:
        name: Login to Quay with pull credentials
        command: |
            docker login -u "$QUAY_RHACS_ENG_RO_USERNAME" -p "$QUAY_RHACS_ENG_RO_PASSWORD" quay.io

  quay-login-push:
    steps:
    - run:
        name: Login to Quay with push credentials
        command: |
            docker login -u "$QUAY_RHACS_ENG_RW_USERNAME" -p "$QUAY_RHACS_ENG_RW_PASSWORD" quay.io

  dockerized-pull-cache-image:
    steps:
    - run:
        name: Pull cache image
        command: |
          "${CI_ROOT}/dockerized-pull-cache-image/10-pull-cache-image.sh" "${COLLECTOR_DRIVERS_CACHE}" << pipeline.parameters.quay-repo >>

  dockerized-check-drivers-built:
    steps:
    - run:
        name: Check if job should run
        command: |
          if [[ ! -s ~/workspace/build-tasks ]]; then
            echo "Nothing was built, skipping this job"

            "${CI_ROOT}/safe-halt.sh"
            exit
          fi

  dockerized-should-run:
    steps:
    - run:
        name: Check if dockerized job should run
        command: |
          if [[ ! -f ~/workspace/pr-metadata/labels/run-dockerized-steps ]]; then
            echo "Skipping dockerized build jobs."
            "${CI_ROOT}/safe-halt.sh"
            exit
          fi

  stackrox-io-login:
    steps:
    - run:
        name: Docker login to collector.stackrox.io
        command: |
          docker login \
            -u "$STACKROX_IO_PUSH_USERNAME" \
            -p "$STACKROX_IO_PUSH_PASSWORD" \
            collector.stackrox.io

  install-hub-comment:
    steps:
    - run:
        name: Install HUB comment
        command: |
          "${CI_ROOT}/install-hub-comment.sh"

jobs:
  initjob:
    <<: *defaultImage
    environment:
    - SOURCE_ROOT: /home/circleci/workspace/go/src/github.com/stackrox/collector
    - CI_ROOT: /home/circleci/workspace/go/src/github.com/stackrox/collector/.circleci
    - SHARED_ENV: /home/circleci/workspace/shared-env

    steps:
    - checkout:
        path: ~/workspace/go/src/github.com/stackrox/collector

    - add_ssh_keys:
        fingerprints:
        - "32:e2:6d:de:c3:bb:b8:a4:62:89:a1:df:7a:30:37:f2"

    - run:
        name: "Pull git submodule"
        command: |
          "${CI_ROOT}/initjob/10-pull-git-submodule.sh" "${SOURCE_ROOT}"

    - run:
        name: Set up shared environment
        command: |
          "${CI_ROOT}/initjob/20-set-up-shared-environment.sh" "${SHARED_ENV}"

    - read-pr-metadata

    - run:
        name: Set COLLECTOR_VERSION
        command: |
          "${CI_ROOT}/initjob/30-set-collector-version.sh" \
            "${SHARED_ENV}" \
            << pipeline.parameters.dockerized-cache-tag >> \
            "circle-build-${CIRCLE_WORKFLOW_ID}" \
            "${CIRCLE_TAG}" \
            "${CIRCLE_BRANCH}" \
            "${SOURCE_ROOT}"

    - run:
        name: Set label environment variables
        command: |
          "${CI_ROOT}/initjob/40-set-label-environment-variables.sh" "${SHARED_ENV}"

    - persist_to_workspace:
        root: ~/workspace
        paths:
        - go/src/github.com/stackrox/collector
        - pr-metadata
        - shared-env

  lint:
    <<: *defaultImage
    steps:
    - initcommand
    - run:
        name: Lint via clang-format
        command: |
           make -C "${COLLECTOR_SOURCE_ROOT}" check

    - run:
        name: Lint via shfmt
        command: |
          go install mvdan.cc/sh/v3/cmd/shfmt@v3.4.1
          make -C "${SOURCE_ROOT}" shfmt-check

  prepare-kernels:
    <<: *defaultImage

    steps:
    - initcommand

    - run:
        name: Prepare source
        command: |
          "${CI_ROOT}/prepare-kernels/10-prepare-source.sh"

    - run:
        name: Prepare legacy sources
        command: |
          "${CI_ROOT}/prepare-kernels/20-prepare-legacy-sources.sh" "${CIRCLE_TAG}" "${CIRCLE_BRANCH}"

    - run:
        name: Prepare Kernel module build cache lookup
        command: |
          "${CI_ROOT}/prepare-kernels/30-prepare-kernel-module-build-cache-lookup.sh"

    - restore_cache:
        name: Restore Kernel module build cache
        keys:
          - kernel-module-cache-v20-{{ checksum "/tmp/cache/kernel-modules-version.txt" }}-{{ .Branch }}-{{ .Revision }}
          - kernel-module-cache-v20-{{ checksum "/tmp/cache/kernel-modules-version.txt" }}-master-

    - run:
        name: Unpack module sources
        command: |
          "${CI_ROOT}/prepare-kernels/40-unpack-module-sources.sh"

    - run:
        name: Copy cached modules to build output
        command: |
          "${CI_ROOT}/prepare-kernels/50-copy-cached-modules-to-build-output.sh"

    - gcloud-init

    - run:
        name: Upload module sources
        command: |
          gsutil -m rsync -r ~/kobuild-tmp/versions-src/ "gs://stackrox-kernel-modules-source/collector/"

    - run:
        name: Download missing modules for CURRENT version from gcloud bucket
        command: |
          "${CI_ROOT}/prepare-kernels/60-download-missing-modules-for-current-version-from-gcloud-bucket.sh"

    - run:
        name: Patch module sources
        command: |
          "${CI_ROOT}/prepare-kernels/70-patch-module-sources.sh"

    - run:
        name: Compile list of cached modules for CURRENT module version
        command: |
          "${CI_ROOT}/prepare-kernels/80-compile-list-of-cached-modules-for-current-module-version.sh"

    - run:
        name: Compile list of existing modules for LEGACY module versions
        command: |
          "${CI_ROOT}/prepare-kernels/90-compile-list-of-existing-modules-for-legacy-module-versions.sh"

    - run:
        name: Generate list of all (source, kernel version) build combinations
        command: |
          "${CI_ROOT}/prepare-kernels/100-generate-list-of-all-build-combinations.sh"

    - run:
        name: Print list of all (source, kernel version) build combinations
        command: |
          "${CI_ROOT}/prepare-kernels/110-print-list-of-all-build-combinations.sh"

    - ci-artifacts/store:
        path: ~/kobuild-tmp
    - persist_to_workspace:
        root: ~/workspace
        paths:
          - ko-build
          - bin
          - shared-env

  kernels:
    <<: *defaultMachine
    environment:
    - BUILD_CONTAINER_TAG: quay.io/rhacs-eng/collector-builder:kobuilder-cache
    - BUILD_CONTAINER_CACHE_IMAGES: quay.io/rhacs-eng/collector-builder:kobuilder-cache
    - KERNEL_BUNDLES_STAGING_BUCKET: "<< pipeline.parameters.kernel-bundles-staging >>"

    steps:
    - initcommand

    - run:
        name: Determine tasks for current shard
        command: |
          "${CI_ROOT}/kernels/10-determine-tasks-for-current-shard.sh" "${CIRCLE_NODE_TOTAL}" "${CIRCLE_NODE_INDEX}"

    - gcloud-init
    - run:
        name: Download required packages
        command: |
          "${CI_ROOT}/kernels/20-download-required-packages.sh" "${CIRCLE_TAG}" "${CIRCLE_BRANCH}" ~/kobuild-tmp

    - run:
        name: Determine versions requiring a custom builder flavor
        command: |
          "${CI_ROOT}/kernels/30-determine-versions-requiring-a-custom-builder-flavor.sh" ~/kobuild-tmp

    - run:
        name: Separate local build tasks by flavor
        command: |
          "${CI_ROOT}/kernels/40-separate-local-build-tasks-by-flavor.sh"

    - quay-login-push

    - run:
        name: Restore builder cache image(s)
        command: |
          make -C "${SOURCE_ROOT}/kernel-modules" pull-build-containers

    - run:
        name: Build builder image
        command: |
          "${CI_ROOT}/kernels/50-build-builder-image.sh"

    - run:
        name: Upload builder cache image
        command: |
          # [[ "$CIRCLE_BRANCH" == "master" ]] || exit 0
          (( CIRCLE_NODE_INDEX == 0 )) || exit 0
          make -C "${SOURCE_ROOT}/kernel-modules" push-build-containers
        background: true

    - run:
        name: Build modules
        command: |
          "${CI_ROOT}/kernels/60-build-modules.sh" "${CIRCLE_NODE_INDEX}"

    - run:
        name: Print built modules
        command: |
          "${CI_ROOT}/kernels/70-print-built-modules.sh" "${CIRCLE_NODE_INDEX}"

    - persist_to_workspace:
        root: ~/workspace
        paths:
          - ko-build/build-output/shard-*
          - ko-build/build-output/FAILURES-*

  kernel-module-build-failures-check:
    <<: *defaultImage

    steps:
      - initcommand

      - run:
          name: Save failures files
          command: |
            "${CI_ROOT}/kernel-module-build-failures-check/10-save-failures-files.sh"

      - run:
          name: Test for build failures
          command: |
            "${CI_ROOT}/kernel-module-build-failures-check/20-test-for-build-failures.sh"

      - ci-artifacts/store:
          path: /tmp/failures

      - slack/status:
          fail_only: true
          mentions: SGX5Y89KJ
          only_for_branches: master
          webhook: '${SLACK_WEBHOOK_KERNEL_PROBE_BUILD_FAILURE}'

  join-modules:
    <<: *defaultImage

    steps:
      - initcommand

      - run:
          name: Consolidate modules built by sharded jobs
          command: |
            "${CI_ROOT}/join-modules/10-consolidate-modules-built-by-sharded-jobs.sh"

      - persist_to_workspace:
          root: ~/workspace
          paths:
            - ko-build/built-probes/

  upload-modules:
    <<: *defaultImage

    steps:
      - initcommand
      - gcloud-init

      - run:
          name: Remove failures file and shard output dirs
          command: |
            "${CI_ROOT}/upload-modules/10-remove-failures-file-and-shard-output-dirs.sh"

      - run:
          name: Uploading Kernel modules
          command: |
            "${CI_ROOT}/upload-modules/20-uploading-kernel-modules.sh" "${CIRCLE_TAG}" "${CIRCLE_BRANCH}" "${CIRCLE_BUILD_NUM}"

      - run:
          name: Sanity check
          command: |
            "${CI_ROOT}/upload-modules/30-sanity-check.sh" "${CIRCLE_TAG}" "${CIRCLE_BRANCH}"

reusejobs: &completeWorkflow
    - initjob:
        <<: *runOnAllTagsWithDockerIOPullCtx
    - lint:
        <<: *runOnAllTagsWithDockerIOPullCtx
        requires:
        - initjob
    - prepare-kernels:
        <<: *runOnAllTagsWithDockerIOPullCtx
        requires:
        - lint
    - kernels:
        <<: *runOnAllTagsWithDockerIOPushCtx
        requires:
        - prepare-kernels
    - join-modules:
        <<: *runOnAllTagsWithDockerIOPullCtx
        requires:
        - kernels
    - upload-modules:
        <<: *runOnAllTagsWithDockerIOPullCtx
        requires:
        - join-modules
    - kernel-module-build-failures-check:
        <<: *runOnAllTagsWithDockerIOPullCtx
        requires:
        - kernels
workflows:
  version: 2
  build:
    jobs:
      *completeWorkflow
