name: Collector image build

on:
  workflow_call:
    inputs:
      collector-tag:
        type: string
        required: true
        description: |
          The tag used to build the collector image
      collector-image:
        type: string
        required: true
        description: |
          Basic stackrox-io image built
      collector-builder-tag:
        type: string
        required: true
        description: |
          The builder tag to use in the build

env:
  COLLECTOR_TAG: ${{ inputs.collector-tag }}
  COLLECTOR_BUILDER_TAG: ${{ inputs.collector-builder-tag }}
  RHACS_ENG_IMAGE: quay.io/rhacs-eng/collector:${{ inputs.collector-tag }}

jobs:
  create-s390x-build-vms:
    if: ${{ contains(github.event.pull_request.labels.*.name, 'run-multiarch-builds') || github.event_name == 'push' }}
    uses: ./.github/workflows/create-vms.yml
    with:
      vm_type: rhel-s390x
      job-tag: builder
      kind: build
    secrets: inherit

  build-collector-image:
    name: Build the collector slim image
    runs-on: ubuntu-latest
    if: always() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    needs:
      - create-s390x-build-vms
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, ppc64le, s390x, arm64]

    env:
      PLATFORM: linux/${{ matrix.arch }}
      JOB_ID: ${{ needs.create-s390x-build-vms.outputs.job-id }}
      BUILD_TYPE: ci

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Checks PR, main and release branches
        run: |
          if [[ "${{ github.event_name }}" == 'pull_request' ]]; then
            echo "COLLECTOR_APPEND_CID=true" >> "$GITHUB_ENV"
            echo "TRACE_SINSP_EVENTS=1" >> "$GITHUB_ENV"

            if [[ "${{ contains(github.event.pull_request.labels.*.name, 'address-sanitizer') }}" == "true" ]]; then
              echo "ADDRESS_SANITIZER=true" >> "$GITHUB_ENV"
            fi
          fi

      - name: Create Ansible Vars (inc. secrets)
        run: |
          {
            echo "---"
            echo "stackrox_io_username: ${{ secrets.QUAY_STACKROX_IO_RW_USERNAME }}"
            echo "stackrox_io_password: ${{ secrets.QUAY_STACKROX_IO_RW_PASSWORD }}"
            echo "rhacs_eng_username: ${{ secrets.QUAY_RHACS_ENG_RW_USERNAME }}"
            echo "rhacs_eng_password: ${{ secrets.QUAY_RHACS_ENG_RW_PASSWORD }}"
          } > ${{ github.workspace }}/ansible/secrets.yml

      - name: Authenticate with GCP
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GOOGLE_CREDENTIALS_COLLECTOR_SVC_ACCT }}'

      - name: Setup GCP
        uses: 'google-github-actions/setup-gcloud@v1'

      - uses: ./.github/actions/setup-vm-creds
        with:
          gcp-ssh-key: ${{ secrets.GCP_SSH_KEY }}
          gcp-ssh-key-pub: ${{ secrets.GCP_SSH_KEY_PUB }}
          s390x-key: ${{ secrets.IBM_CLOUD_S390X_SSH_PRIVATE_KEY }}
          ppc64le-key: ${{ secrets.IBM_CLOUD_POWER_SSH_PRIVATE_KEY }}

      - name: Download inventory
        if: matrix.arch == 's390x'
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.create-s390x-build-vms.outputs.inventory }}
          path: ${{ github.workspace }}/ansible/ci/

      - name: Install ansible dependencies
        run: |
          ls -lah .
          ls -lah ansible
          ls -lah ansible/ci
          ansible-galaxy install -r ansible/requirements.yml

      - name: Build images
        if: |
          github.event_name == 'push' ||
          matrix.arch == 'amd64' ||
          (contains(github.event.pull_request.labels.*.name, 'run-multiarch-builds') && matrix.arch != 's390x')
        timeout-minutes: 480
        run: |
          ansible-playbook \
            --connection local \
            -i localhost, \
            --limit localhost \
            -e collector_image='${{ inputs.collector-image }}' \
            -e collector_tag='${{ inputs.collector-tag }}' \
            -e collector_builder_tag='${{ env.COLLECTOR_BUILDER_TAG }}' \
            -e arch='${{ matrix.arch }}' \
            -e disable_profiling="${{ matrix.arch != 'amd64' && matrix.arch != 'arm64' }}" \
            -e @'${{ github.workspace }}/ansible/secrets.yml' \
            ansible/ci-build-collector.yml
        env:
          ANSIBLE_CONFIG: ansible/ansible.cfg

      - name: Build s390x image
        if: |
          github.event_name == 'push' ||
          (contains(github.event.pull_request.labels.*.name, 'run-multiarch-builds') && matrix.arch == 's390x')
        timeout-minutes: 480
        run: |
          ansible-playbook \
            -i ansible/ci \
            -e collector_image='${{ inputs.collector-image }}' \
            -e collector_tag='${{ inputs.collector-tag }}' \
            -e collector_git_ref='${{ github.sha }}' \
            -e collector_builder_tag='${{ env.COLLECTOR_BUILDER_TAG }}' \
            -e arch='${{ matrix.arch }}' \
            -e disable_profiling="true" \
            -e @'${{ github.workspace }}/ansible/secrets.yml' \
            ansible/ci-build-collector.yml
        env:
          ANSIBLE_CONFIG: ansible/ansible.cfg

      - name: Save CMake cache
        uses: actions/upload-artifact@v3
        with:
          name: cmake-${{ matrix.arch }}
          path: cmake-build/CMakeCache.txt
          retention-days: 1

      - name: Destroy Build VMs
        if: always()
        run: |
          make -C ansible destroy-vms

  create-multiarch-manifest:
    needs:
    - build-collector-image
    name: Create Multiarch manifest
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' ||
      contains(github.event.pull_request.labels.*.name, 'run-multiarch-builds')
    env:
      ARCHS: amd64 ppc64le s390x arm64

    steps:
      - uses: actions/checkout@v3

      - name: Login to quay.io/stackrox-io
        uses: docker/login-action@v2
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_STACKROX_IO_RW_USERNAME }}
          password: ${{ secrets.QUAY_STACKROX_IO_RW_PASSWORD }}

      - name: Create and push multiarch manifest for stackrox-io -slim
        uses: ./.github/actions/create-multiarch-manifest
        with:
          base-image: quay.io/stackrox-io/collector:${{ inputs.collector-tag }}
          archs: ${{ env.ARCHS }}
          suffix: -slim

      - name: Create and push multiarch manifest for stackrox-io -base
        uses: ./.github/actions/create-multiarch-manifest
        with:
          base-image: quay.io/stackrox-io/collector:${{ inputs.collector-tag }}
          archs: ${{ env.ARCHS }}
          suffix: -base

      - name: Login to quay.io/rhacs-eng
        uses: docker/login-action@v2
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_RHACS_ENG_RW_USERNAME }}
          password: ${{ secrets.QUAY_RHACS_ENG_RW_PASSWORD }}

      - name: Create and push multiarch manifest for rhacs-eng -slim
        uses: ./.github/actions/create-multiarch-manifest
        with:
          base-image: quay.io/rhacs-eng/collector:${{ inputs.collector-tag }}
          archs: ${{ env.ARCHS }}
          suffix: -slim

      - name: Create and push multiarch manifest for rhacs-eng -base
        uses: ./.github/actions/create-multiarch-manifest
        with:
          base-image: quay.io/rhacs-eng/collector:${{ inputs.collector-tag }}
          archs: ${{ env.ARCHS }}
          suffix: -base

  retag-x86-image:
    needs:
    - build-collector-image
    name: Retag x86 slim image
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' &&
      !contains(github.event.pull_request.labels.*.name, 'run-multiarch-builds')
    steps:
      - name: Pull image to retag
        run: |
          docker pull ${{ inputs.collector-image }}-amd64-slim

      - name: Retag and push stackrox-io -slim
        uses: stackrox/actions/images/retag-and-push@v1
        with:
          src-image: ${{ inputs.collector-image }}-amd64-slim
          dst-image: ${{ inputs.collector-image }}-slim
          username: ${{ secrets.QUAY_STACKROX_IO_RW_USERNAME }}
          password: ${{ secrets.QUAY_STACKROX_IO_RW_PASSWORD }}

      - name: Retag and push stackrox-io -base
        uses: stackrox/actions/images/retag-and-push@v1
        with:
          src-image: ${{ inputs.collector-image }}-amd64-slim
          dst-image: ${{ inputs.collector-image }}-base
          username: ${{ secrets.QUAY_STACKROX_IO_RW_USERNAME }}
          password: ${{ secrets.QUAY_STACKROX_IO_RW_PASSWORD }}

      - name: Retag and push rhacs-eng -slim
        uses: stackrox/actions/images/retag-and-push@v1
        with:
          src-image: ${{ inputs.collector-image }}-amd64-slim
          dst-image: ${{ env.RHACS_ENG_IMAGE }}-slim
          username: ${{ secrets.QUAY_RHACS_ENG_RW_USERNAME }}
          password: ${{ secrets.QUAY_RHACS_ENG_RW_PASSWORD }}

      - name: Retag and push rhacs-eng -base
        uses: stackrox/actions/images/retag-and-push@v1
        with:
          src-image: ${{ inputs.collector-image }}-amd64-slim
          dst-image: ${{ env.RHACS_ENG_IMAGE }}-base
          username: ${{ secrets.QUAY_RHACS_ENG_RW_USERNAME }}
          password: ${{ secrets.QUAY_RHACS_ENG_RW_PASSWORD }}
