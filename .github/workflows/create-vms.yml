on:
  workflow_call:
    inputs:
      vm_type:
        description: |
          Type of VM to run integration tests on. e.g. rhel or ubuntu-os
        type: string
        required: true
      job-tag:
        description: |
          Used to differentiate between different sources when creating
          VMs in GCP.
        type: string
        default: ""
      kind:
        description: |
          The kind of VMs to create. build, test, benchmark
        type: string
        default: "test"
    outputs:
      job-id:
        description: The job-id used to create the VMs
        value: ${{ jobs.create-vms.outputs.job-id }}
      inventory:
        description: The name of the inventory artefact
        value: ${{ jobs.create-vms.outputs.inventory }}

jobs:
  create-vms:
    runs-on: ubuntu-latest
    outputs:
      job-id: ${{ steps.finalize.outputs.job-id }}
      inventory: ${{ steps.finalize.outputs.inventory }}
    env:
      #
      # JOB_ID is a little odd in that it needs to be unique per vm_type,
      # but GHA's run_id is only unique per job. Appending the vm_type
      # makes it fit our requirements...
      #
      # but wait, there's more
      #
      # the job id is used both as part of a GCP instance name and label, but
      # also as a group name in ansible, which means it has some restrictions:
      #
      # - must be alpha-numeric
      # - must not contain underscores (because of GCP)
      # - must not contain hyphens (because of ansible)
      #
      # vm_type may contain hyphens, so the id is normalized below
      #
      JOB_ID: ${{ github.run_id }}${{ inputs.vm_type }}${{ inputs.job-tag }}
      BUILD_TYPE: ci
      VM_TYPE: ${{ inputs.vm_type }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Install python dependencies
        run: python -m pip install -r ansible/requirements.txt

      - name: Install ansible dependencies
        run: ansible-galaxy collection install -r ansible/ansible-collections.yml

      - name: Authenticate with GCP
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GOOGLE_CREDENTIALS_COLLECTOR_SVC_ACCT }}'

      - name: Setup GCP
        uses: 'google-github-actions/setup-gcloud@v1'

      - name: Setup credentials files
        uses: ./.github/actions/setup-vm-creds
        with:
          gcp-ssh-key: ${{ secrets.GCP_SSH_KEY }}
          gcp-ssh-key-pub: ${{ secrets.GCP_SSH_KEY_PUB }}
          s390x-key: ${{ secrets.IBM_CLOUD_S390X_SSH_PRIVATE_KEY }}
          ppc64le-key: ${{ secrets.IBM_CLOUD_POWER_SSH_PRIVATE_KEY }}

      - name: Set environment
        run: |
          NORM_JOB_ID="${JOB_ID//-/}"
          echo "JOB_ID=${NORM_JOB_ID}" | tee -a "$GITHUB_ENV"

          if [[ '${{ contains(github.event.pull_request.labels.*.name, 'integration-tests-trace-logging') }}' == 'true' ]]; then
            echo "COLLECTOR_LOG_LEVEL=trace" | tee -a "$GITHUB_ENV"
          fi

          if [[ '${{ inputs.vm_type }}' =~ s390x ]]; then
            {
              echo "IC_API_KEY=${{ secrets.IBM_CLOUD_S390X_API_KEY }}"
              echo "IC_REGION=ca-tor"
            } >> "${GITHUB_ENV}"
          fi

          if [[ '${{ inputs.vm_type }}' =~ ppc64le ]]; then
            {
              echo "IC_API_KEY=${{ secrets.IBM_CLOUD_POWER_API_KEY }}"
              echo "IC_REGION=osa"
              echo "IC_ZONE=osa21"
              echo "IBM_CLOUD_POWER_SSH_PUBLIC_KEY=${{ secrets.IBM_CLOUD_POWER_SSH_PUBLIC_KEY }}"
            } >> "${GITHUB_ENV}"
          fi

          if [[ '${{ inputs.vm_type }}' =~ rhel ]]; then
            {
              echo "REDHAT_USERNAME=${{ secrets.REDHAT_USERNAME }}"
              echo "REDHAT_PASSWORD=${{ secrets.REDHAT_PASSWORD }}"
            } >> "${GITHUB_ENV}"
          fi

      - name: Create VMs
        if: inputs.kind == 'test'
        run: |
          make -C "${{ github.workspace }}/ansible" create-ci-vms

      - name: Create Benchmark VMs
        if: inputs.kind == 'benchmark'
        run: |
          make -C "${{ github.workspace }}/ansible" create-benchmark-vms

      - name: Create Build VMs
        if: inputs.kind == 'build'
        run: |
          make -C "${{ github.workspace }}/ansible" create-build-vms

      - name: Save Inventory Files
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.vm_type }}-${{ inputs.job-tag }}-inventory
          path: |
            ${{ github.workspace }}/ansible/ci/*.yml

      - name: Set outputs
        id: finalize
        run: |
          echo "inventory=${{ inputs.vm_type }}-${{ inputs.job-tag }}-inventory" >> "$GITHUB_OUTPUT"
          echo "job-id=${{ env.JOB_ID }}" >> "$GITHUB_OUTPUT"

      - name: Clean up
        if: always() && failure()
        run: make -C "${{ github.workspace }}/ansible" destroy-vms
